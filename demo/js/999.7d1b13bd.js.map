{"version":3,"file":"js/999.7d1b13bd.js","mappings":"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","sources":["webpack://crosses/./src/libs/settings.js","webpack://crosses/./src/libs/debug.js","webpack://crosses/./src/libs/matrix.js","webpack://crosses/./src/libs/gameplay.js","webpack://crosses/./src/libs/computer.js","webpack://crosses/./src/components/GameArea.vue","webpack://crosses/./src/components/GameArea.vue?c675","webpack://crosses/./src/views/GameView.vue"],"sourcesContent":["import { computed } from 'vue'\nimport { useStore } from 'vuex'\n\n/**\n * Библиотека управления настройками\n * @returns {Object} Публичные методы\n */\nexport function useSettings() {\n  const store = useStore()\n\n  // Настройки\n  const settings = computed(() => store.getters['getSettings']).value\n\n  return {\n    settings\n  }\n}","import { computed } from 'vue'\nimport { useStore } from 'vuex'\nimport { useRoute } from 'vue-router'\n\n/**\n * Библиотека управления дебаг-режимом\n * @returns {Object} Публичные методы\n */\nexport function useDebug() {\n  const store = useStore()\n  const route = useRoute()\n  \n  const debugMode = route.query.debug\n\n  // Разрешить попап выбора хода\n  const getAllowMoverPopup = () => computed(() => store.getters['debug/allowMoverPopup']).value\n\n  const allowMoverPopup = (value) => {\n    store.dispatch('debug/allowMoverPopup', value)\n  }\n\n  // Не передавать ход компьютеру\n  const getDontPassMoveToComputer = computed(() => store.getters['debug/dontPassMoveToComputer']).value\n  \n  const dontPassMoveToComputer = (value) => {\n    store.dispatch('debug/dontPassMoveToComputer', value)\n  }\n  \n  return {\n    debugMode,\n    getAllowMoverPopup,\n    allowMoverPopup,\n    getDontPassMoveToComputer,\n    dontPassMoveToComputer\n  }\n}","import { reactive, computed } from 'vue'\nimport { useStore } from 'vuex'\nimport { useDebug } from '@/libs/debug.js'\nimport { useSettings } from '@/libs/settings.js'\n\n/**\n * Библиотека управления матрицей (поля игры)\n * @returns {Object} Публичные методы\n */\nexport function useMatrix() {\n  const store = useStore()\n  const { settings } = useSettings()\n  const { debugMode } = useDebug()\n\n  // Инициализация css-переменных необходимых для отрисовки матрицы\n  const documentRoot = document.documentElement\n  documentRoot.style.setProperty(\n    \"--matrix-range\",\n    settings.range\n  )\n\n  /**\n   * Траспонирование матрицы\n   * @returns {Array} Повернутая матрица\n   */\n  const $_matrix_transposedMatrix = () => {\n    const matrix = computed(() => store.getters['getMatrix']).value\n\n    return matrix[0]\n      .map((_, i) => matrix.map(row => row[i]))\n  }\n\n  /**\n   * Отзеркаливание матрицы\n   * @returns {Array} Перевернутая матрица\n   */\n  const $_matrix_mirroredMatrix = () => {\n    const matrix = computed(() => store.getters['getMatrix']).value\n\n    return matrix\n      .map(row => row.slice().reverse())\n  }\n\n  /**\n   * Проверка заполнености по осям\n   * @param {String} mover Кто ходит\n   * @param {String} direction В каком направлении проверять: horizontal, vertical \n   * @returns {Boolean} результат проверки\n   */\n  const testAxis = ({ mover, direction = 'horizontal' }) => {\n    const matrix = computed(() => store.getters['getMatrix']).value\n\n    const m = (direction === 'vertical') ? $_matrix_transposedMatrix() : matrix\n    const mark = (mover === 'player') ? settings.playerMark : settings.computerMark\n\n    const result = m.map(row => {\n      return (row.filter(item => {\n        return item === mark\n      }).length === settings.range)\n    })\n\n    if (result.some(item => item)) {\n      return true\n    }\n  }\n\n  /**\n   * Проверка по диагонали\n   * @param {String} mover Кто ходит \n   * @param {String} direction В каком направлении проверять: toBottom, toTop \n   * @returns {Boolean} Результат проверки\n   */\n  const testDiagonal = ({ mover, direction = 'toBottom' }) => {\n    const matrix = computed(() => store.getters['getMatrix']).value\n\n    const m = (direction === 'toTop') ? $_matrix_mirroredMatrix() : matrix\n    const mark = (mover === 'player') ? settings.playerMark : settings.computerMark\n\n    let flags = []\n    m.forEach((row, i) => {\n      row.forEach((cell, j) => {\n        if (i === j && cell === mark) {\n          flags.push(true)\n        }\n      })\n    })\n    if (flags.length === settings.range) {\n      return true\n    }\n  }\n\n  /**\n   * Инициализация пустой матрицы на остнове настроек\n   */\n  const setMatrix = () => {\n    const matrix = reactive(\n      Array(settings.range)\n        .fill()\n        .map(() => Array(settings.range).fill())\n    )\n    \n    store.dispatch('setMatrix', matrix)\n  }\n\n  // Получить сгененрированную матрицу\n  const getMatrix = () => computed(() => store.getters['getMatrix']).value\n\n  /**\n   * Установить маркер в ячейку\n   * @param {String} mark Маркер\n   * @param {Object} coords Координаты { x, y }\n   */\n  const markCell = ({ mark, coords }) => {\n    store.dispatch('markCell', { mark, coords })\n  }\n  \n  /**\n   * Проверить ячейку\n   * @param {Integer} Координата x \n   * @param {Integer} Координата y \n   * @returns {Boolean} Результат проверки \n   */\n  const checkCell = ({ x, y }) => {\n    if (debugMode) console.log('[debug] matrix():checkCell coords:', { x, y })\n\n    const matrix = computed(() => store.getters['getMatrix']).value\n\n    if (debugMode) console.log('[debug] matrix():checkCell matrix[x][y]:', matrix[x][y])\n\n    return !matrix[x][y]\n  }\n\n  return {\n    setMatrix,\n    getMatrix,\n    markCell,\n    testMatrixAxis: testAxis,\n    testMatrixDiagonal: testDiagonal,\n    checkMatrixCell: checkCell\n  }\n}","import { computed } from 'vue'\nimport { useStore } from 'vuex'\nimport { useDebug } from '@/libs/debug.js'\nimport { useSettings } from '@/libs/settings.js'\nimport { useMatrix } from '@/libs/matrix.js'\n\n/**\n * Библиотека управления геймплеем\n * @returns {Object} Публичные методы\n */\nexport function useGameplay() {\n  const store = useStore()\n  const { settings } = useSettings()\n  const matrix = useMatrix()\n  const debug = useDebug()\n  \n  // [debug] variables\n  const debugMode = debug.debugMode\n  const db__getDontPassMoveToComputer = computed(() => debug.getDontPassMoveToComputer).value\n  // [END] [debug] variables\n\n  /**\n   * Проверка условий победы\n   * @private\n   * @param {String} mover Кто ходил\n   * @returns {Object} Кто победил и как\n   */\n  const $_gameplay_victoryConditionsCheck = (mover) => {\n    // Победа по горизонтали\n    if (matrix.testMatrixAxis({ mover })) {\n      return {\n        victory: true,\n        message: 'Победа по горизонтали'\n      }\n    }\n\n    // Победа по вертикали\n    if (matrix.testMatrixAxis({ mover, direction: 'vertical' })) {\n      return {\n        victory: true,\n        message: 'Победа по вертикали'\n      }\n    }\n\n    // Победа по диагонали слева вниз\n    if (matrix.testMatrixDiagonal({ mover })) {\n      return {\n        victory: true,\n        message: 'Победа по диагонали'\n      }\n    }\n\n    // Победа по диагонали справа вниз\n    if (matrix.testMatrixDiagonal({ mover, direction: 'toTop' })) {\n      return {\n        victory: true,\n        message: 'Победа по диагонали'\n      }\n    }\n\n    return {\n      victory: false,\n      message: null\n    }\n  }\n\n  // Инициализация матрицы\n  matrix.setMatrix()\n\n  // Получить, кто сейчас ходит\n  const getCurrentMove = () => computed(() => store.getters['getCurrentMove']).value\n\n  /**\n   * Сменить того, кто ходит\n   * @param {String} mover Кто ходит\n   */\n  const changeMove = (mover) => {\n    store.dispatch('changeMove', mover)\n  }\n\n  /**\n   * Установка маркера в ячейку\n   * @param {String} mover Кто ходит \n   * @param {Object} coords Координаты { x, y } \n   */\n  const setMark = ({ mover, coords }) => {\n    if (debugMode) {\n      console.log('[debug] gameplay:setMark() | Ставит маркер:', mover)\n    }\n\n    matrix.markCell({\n      mark: (mover === 'player') ? settings.playerMark : settings.computerMark,\n      coords: coords\n    })\n\n    const result = $_gameplay_victoryConditionsCheck(mover);\n    if (result.victory) {\n      declareWinner({\n        winner: mover,\n        message: result.message\n      })\n\n      if (debugMode) {\n        console.log('[debug] gameplay:setMark | Условие победы: ', result.message)\n      }\n\n      return;\n    }\n\n    if (debugMode && mover === 'player' && db__getDontPassMoveToComputer) {\n      return;\n    }\n\n    store.dispatch('changeMove', mover === 'player' ? 'computer' : 'player')\n  }\n\n  /**\n   * Проверка свободных ячеек\n   * @returns {Boolean}\n   */\n  const checkFreeMovies = () => {\n    let result = 0;\n\n    const matrix = computed(() => store.getters['getMatrix']).value\n\n    matrix.map(i => {\n      i.map(j => {\n        if (!j) {\n          result++\n        }\n      })\n    })\n\n    return (result > 0)\n  }\n\n  /**\n   * Объявить ничью\n   */\n  const declareDraw = () => {\n    if (debugMode) {\n      const matrix = computed(() => store.getters['getMatrix']).value\n      console.log('[debug] Победитель: Ничья')\n      console.log('[debug] matrix:', matrix)\n    }\n\n    store.dispatch('setDraw')\n    gameOver()\n  }\n\n  /**\n   * Объявить победителя\n   * @param {Object} victory Описание победителя \n   */\n  const declareWinner = (victory) => {\n    if (debugMode) {\n      const matrix = computed(() => store.getters['getMatrix']).value\n      console.log(`[debug] Победитель: ${victory.mover}`)\n      console.log('[debug] matrix:', matrix)\n    }\n\n    store.dispatch('setVictory', victory)\n    gameOver()\n  }\n\n  /**\n   * Сброс игры\n   */\n  const resetGame = () => {\n    if (debugMode) console.log('[debug] gameplay:resetGame()')\n\n    matrix.setMatrix()\n    store.dispatch('clearCurrentGameStat')\n  }\n\n  /**\n   * Окончание игры\n   */\n  const gameOver = () => {\n    const gameState = computed(() => store.getters['getGameState']).value\n    if (debugMode) console.log(`[debug] gameplay:newGame() gameState:`, gameState)\n\n    if (gameState) {\n      alert(`\n        Игра окончена! \\n\n        ${gameState === 'Ничья' ? 'Ничья' : `Победитель: ${gameState.winner}`}\n      `)\n\n      resetGame()\n    } else {\n      if (debugMode) console.log(`[debug] Ошибка: игра продолжается`)\n    }\n  }\n\n  return {\n    getCurrentMove,\n    changeMove,\n    setMark,\n    checkFreeMovies,\n    declareDraw,\n    declareWinner,\n    resetGame\n  }\n}","import { useSettings } from '@/libs/settings.js'\nimport { useMatrix } from '@/libs/matrix.js'\nimport { useGameplay } from '@/libs/gameplay.js'\n\n/**\n * Библиотека управления компьютерным соперником\n * @returns {Object} Публичные методы\n */\nexport function useComputer() {\n  // const store = useStore()\n  const { settings } = useSettings()\n  const matrix = useMatrix()\n  const gameplay = useGameplay()\n\n  /**\n   * Рандомайзер целых чисел на основе настроек матрицы\n   * @private\n   * @returns {Integer}\n   */\n  const $_computer_rand = () => {\n    let r = 0 + Math.random() * (settings.range - 0)\n    return Math.floor(r)\n  }\n\n  /**\n   * Компьютер делает ход на основе настроек сложности:\n   * 0 - Рандомные доступные ячейки\n   * 1 - Ставить метку, чтобы победить\n   * 2 - Ставит метку блокируя игрока\n   */\n  const move = () => {\n    // Если есть свободные ходы\n    if (gameplay.checkFreeMovies()) {\n      // Задержка для того, чтобы игрок успел понять, что компьютер сходил\n      setTimeout(() => {\n        if (settings.difficulty === 0) {\n          let x = $_computer_rand()\n          let y = $_computer_rand()\n\n          const result = matrix.checkMatrixCell({ x, y })\n          if (result) {\n            gameplay.setMark({\n              mover: 'computer',\n              coords: { x, y }\n            })\n          } else {\n            move()\n          }\n        }\n      }, 500)\n    } else {\n      // Если свободных ходов нет, объявить ничью\n      gameplay.declareDraw()\n    }\n  }\n\n  return {\n    computerMove: move\n  }\n}","<template>\n  <div class=\"game-area\">\n    <section class=\"game-area__grid\">\n      <template \n        v-for=\"(row, x) in matrix\"\n        :key=\"`row-${x}`\"\n      >\n        <div \n          v-for=\"(cell, y) in row\"\n          :key=\"`cell-${y}`\"\n          class=\"game-area__cell\"\n        >\n          <button \n            type=\"button\"\n            :disabled=\"currentMove === 'computer' || cell\"\n            :ref=\"`cell-${x}-${y}`\"\n            @click=\"debugMode && db__allowMoverPopup ? db__fShowCellPopup(x, y) : onMark(x, y)\"\n          >\n            {{ cell || 'ㅤ' }}\n          </button>\n\n          <ul\n            v-if=\"debugMode && db__allowMoverPopup\"\n            v-show=\"db__showCellPopup && (x === db__x && y === db__y)\" \n            class=\"game-area__cell-popup\"\n          >\n            <li \n              class=\"game-area__item\"\n              @click=\"db__onMark({\n                coords: { x, y },\n                mover: 'player'\n              })\"\n            >\n              player\n            </li>\n            <li \n              class=\"game-area__item\"\n              @click=\"db__onMark({\n                coords: { x, y },\n                mover: 'computer'\n              })\"\n            >\n              computer\n            </li>\n          </ul>\n        </div>\n      </template>\n    </section>\n\n    <section \n      v-if=\"debugMode\"\n      class=\"game-area__debug-actions-panel\"\n    >\n      <button @click=\"db__onAllowMoverPopup()\">\n        Выбор хода: {{ db__allowMoverPopup ? 'вкл' : 'выкл' }}\n      </button>\n\n      <button @click=\"db__onResetGame()\">\n        Сброс\n      </button>\n    </section>\n  </div>\n</template>\n\n<script setup>\nimport { watch, computed, ref } from 'vue'\nimport { useSettings } from '@/libs/settings.js'\nimport { useDebug } from '@/libs/debug.js'\nimport { useMatrix } from '@/libs/matrix.js'\nimport { useComputer } from '@/libs/computer.js'\nimport { useGameplay } from '@/libs/gameplay.js'\n\nconst { settings } = useSettings()\nconst { getMatrix } = useMatrix()\nconst { computerMove } = useComputer()\nconst gameplay = useGameplay()\nconst debug = useDebug()\n\n// [DEBUG values]\nconst debugMode = debug.debugMode\nlet db__showCellPopup = ref(false)\nlet db__x = ref(0)\nlet db__y = ref(0)\nlet db__allowMoverPopup = computed(() => debug.getAllowMoverPopup())\n// END [DEBUG values]\n\n// Получение собранной матрицы для отрисовки\nlet matrix = computed(() => getMatrix())\n\n// Наблюдатель передает ход компьютеру\nlet currentMove = computed(() => gameplay.getCurrentMove())\nwatch(currentMove, (val, old) => {\n  if (val !== old && val === 'computer') {\n    computerMove()\n  }\n})\n\n// Инициализация педаставления первого хода\ngameplay.changeMove(settings.firstMove)\n\n// Метод установки маркера игроком\nconst onMark = (x, y) => {\n  gameplay.setMark({\n    mover: 'player',\n    coords: { x, y }\n  })\n}\n\n// [DEBUG methods]\n// Показывает попап выбора, за кого ходить\nconst db__fShowCellPopup = (x, y) => {\n  console.log('[debug] db__fShowCellPopup method | x:', x)\n  console.log('[debug] db__fShowCellPopup method | y:', y)\n  db__x.value = x\n  db__y.value = y\n  db__showCellPopup.value = true\n}\n\n// Метод установки маркера в дебаг-режиме\nconst db__onMark = ({ coords, mover }) => {\n  console.log('[debug] db__onMark method | mover:', mover)\n  console.log('[debug] db__onMark method | settings.computerMark:', settings.computerMark)\n  db__showCellPopup.value = false\n\n  gameplay.setMark({\n    mover: mover,\n    coords: coords\n  })\n}\n\n// Проверка разрешения показывать дебаг-попап\nconst db__onAllowMoverPopup = () => {\n  debug.allowMoverPopup(!db__allowMoverPopup.value)\n}\n\n// Сброс игры в дебг-режиме\nconst db__onResetGame = () => {\n  console.log('[debug] Сброс игры')\n\n  gameplay.resetGame()\n}\n// END [DEBUG methods]\n</script>\n\n<style lang=\"scss\">\n.game-area__grid {\n  display: grid;\n  grid-template-columns: repeat(var(--matrix-range), auto);\n}\n\n.game-area__cell {\n  position: relative;\n}\n\n.game-area__cell-popup {\n  display: block;\n  width: auto;\n  margin: 0;\n  padding: 10px;\n  list-style: none;\n\n  background-color: white;\n  border: 1px solid gray;\n\n  position: absolute;\n  right: 0;\n  bottom: 0;\n  z-index: 1;\n  transform: translateY(100%);\n}\n\n.game-area__item {\n  cursor: pointer;\n\n  &:not(:last-child) {\n    margin-bottom: 5px;\n  }\n\n  &:hover {\n    color: red\n  }\n}\n</style>\n","import script from \"./GameArea.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./GameArea.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./GameArea.vue?vue&type=style&index=0&id=1ba46994&lang=scss\"\n\nconst __exports__ = script;\n\nexport default __exports__","import script from \"./GameView.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./GameView.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__"],"names":["useSettings","store","useStore","settings","computed","getters","value","useDebug","route","useRoute","debugMode","query","debug","getAllowMoverPopup","allowMoverPopup","dispatch","getDontPassMoveToComputer","dontPassMoveToComputer","useMatrix","documentRoot","document","documentElement","style","setProperty","range","$_matrix_transposedMatrix","matrix","map","_","i","row","$_matrix_mirroredMatrix","slice","reverse","testAxis","mover","direction","m","mark","playerMark","computerMark","result","filter","item","length","some","testDiagonal","flags","forEach","cell","j","push","setMatrix","reactive","Array","fill","getMatrix","markCell","coords","checkCell","x","y","console","log","testMatrixAxis","testMatrixDiagonal","checkMatrixCell","useGameplay","db__getDontPassMoveToComputer","$_gameplay_victoryConditionsCheck","victory","message","getCurrentMove","changeMove","setMark","declareWinner","winner","checkFreeMovies","declareDraw","gameOver","resetGame","gameState","alert","useComputer","gameplay","$_computer_rand","r","Math","random","floor","move","setTimeout","difficulty","computerMove","db__showCellPopup","ref","db__x","db__y","db__allowMoverPopup","currentMove","watch","val","old","firstMove","onMark","db__fShowCellPopup","db__onMark","db__onAllowMoverPopup","db__onResetGame","__exports__"],"sourceRoot":""}